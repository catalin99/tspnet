//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferenceMyPhotos
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMyPhotos.IProject")]
    public interface IProject
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/CreateUser", ReplyAction="http://tempuri.org/InterfaceUser/CreateUserResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.User> CreateUserAsync(string firstName, string lastName, string email, string password, string phone, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/UpdateUser", ReplyAction="http://tempuri.org/InterfaceUser/UpdateUserResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.User> UpdateUserAsync(int id, string firstName, string lastName, string email, string password, string phone, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/DeleteUser", ReplyAction="http://tempuri.org/InterfaceUser/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetUserById", ReplyAction="http://tempuri.org/InterfaceUser/GetUserByIdResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.User> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/GetAllUsers", ReplyAction="http://tempuri.org/InterfaceUser/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.User>> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceUser/Login", ReplyAction="http://tempuri.org/InterfaceUser/LoginResponse")]
        System.Threading.Tasks.Task<bool> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/CreatePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/CreatePhotoResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> CreatePhotoAsync(string fullPath, string photoName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int height, int weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/DeletePhotoResponse")]
        System.Threading.Tasks.Task<bool> DeletePhotoAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhoto/GetPhotoByIdResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> GetPhotoByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/GetAllPhotos", ReplyAction="http://tempuri.org/InterfacePhoto/GetAllPhotosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Photo>> GetAllPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhoto/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhoto/UpdatePhotoResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> UpdatePhotoAsync(int id, string fullPath, string PhotoName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int height, int weight);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMovie/CreateMovie", ReplyAction="http://tempuri.org/InterfaceMovie/CreateMovieResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> CreateMovieAsync(string fullPath, string movieName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMovie/DeleteMovie", ReplyAction="http://tempuri.org/InterfaceMovie/DeleteMovieResponse")]
        System.Threading.Tasks.Task<bool> DeleteMovieAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMovie/GetMovieById", ReplyAction="http://tempuri.org/InterfaceMovie/GetMovieByIdResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> GetMovieByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMovie/GetAllMovies", ReplyAction="http://tempuri.org/InterfaceMovie/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Movie>> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceMovie/UpdateMovie", ReplyAction="http://tempuri.org/InterfaceMovie/UpdateMovieResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> UpdateMovieAsync(int id, string fullPath, string movieName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int duration);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePropertyCode/CreatePropertyCode", ReplyAction="http://tempuri.org/InterfacePropertyCode/CreatePropertyCodeResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.PropertyCode> CreatePropertyCodeAsync(string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePropertyCode/DeletePropertyCode", ReplyAction="http://tempuri.org/InterfacePropertyCode/DeletePropertyCodeResponse")]
        System.Threading.Tasks.Task<bool> DeletePropertyCodeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePropertyCode/GetPropertyCodes", ReplyAction="http://tempuri.org/InterfacePropertyCode/GetPropertyCodesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.PropertyCode>> GetPropertyCodesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProperty/CreateProperty", ReplyAction="http://tempuri.org/InterfaceProperty/CreatePropertyResponse")]
        System.Threading.Tasks.Task<ModelDesignFirst_L1.Property> CreatePropertyAsync(string desc, int mediaID, int propCodeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProperty/GetPropertiesByMediaID", ReplyAction="http://tempuri.org/InterfaceProperty/GetPropertiesByMediaIDResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Property>> GetPropertiesByMediaIDAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IProjectChannel : ServiceReferenceMyPhotos.IProject, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ProjectClient : System.ServiceModel.ClientBase<ServiceReferenceMyPhotos.IProject>, ServiceReferenceMyPhotos.IProject
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ProjectClient() : 
                base(ProjectClient.GetDefaultBinding(), ProjectClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IProject.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProjectClient(EndpointConfiguration endpointConfiguration) : 
                base(ProjectClient.GetBindingForEndpoint(endpointConfiguration), ProjectClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProjectClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ProjectClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProjectClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ProjectClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ProjectClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.User> CreateUserAsync(string firstName, string lastName, string email, string password, string phone, string address)
        {
            return base.Channel.CreateUserAsync(firstName, lastName, email, password, phone, address);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.User> UpdateUserAsync(int id, string firstName, string lastName, string email, string password, string phone, string address)
        {
            return base.Channel.UpdateUserAsync(id, firstName, lastName, email, password, phone, address);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int id)
        {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.User> GetUserByIdAsync(int id)
        {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.User>> GetAllUsersAsync()
        {
            return base.Channel.GetAllUsersAsync();
        }
        
        public System.Threading.Tasks.Task<bool> LoginAsync(string email, string password)
        {
            return base.Channel.LoginAsync(email, password);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> CreatePhotoAsync(string fullPath, string photoName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int height, int weight)
        {
            return base.Channel.CreatePhotoAsync(fullPath, photoName, creationDate, corelatedEvent, taggedPersons, location, height, weight);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePhotoAsync(int id)
        {
            return base.Channel.DeletePhotoAsync(id);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> GetPhotoByIdAsync(int id)
        {
            return base.Channel.GetPhotoByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Photo>> GetAllPhotosAsync()
        {
            return base.Channel.GetAllPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Photo> UpdatePhotoAsync(int id, string fullPath, string PhotoName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int height, int weight)
        {
            return base.Channel.UpdatePhotoAsync(id, fullPath, PhotoName, creationDate, corelatedEvent, taggedPersons, location, height, weight);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> CreateMovieAsync(string fullPath, string movieName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int duration)
        {
            return base.Channel.CreateMovieAsync(fullPath, movieName, creationDate, corelatedEvent, taggedPersons, location, duration);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMovieAsync(int id)
        {
            return base.Channel.DeleteMovieAsync(id);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> GetMovieByIdAsync(int id)
        {
            return base.Channel.GetMovieByIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Movie>> GetAllMoviesAsync()
        {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Movie> UpdateMovieAsync(int id, string fullPath, string movieName, System.DateTime creationDate, string corelatedEvent, string taggedPersons, string location, int duration)
        {
            return base.Channel.UpdateMovieAsync(id, fullPath, movieName, creationDate, corelatedEvent, taggedPersons, location, duration);
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.PropertyCode> CreatePropertyCodeAsync(string code)
        {
            return base.Channel.CreatePropertyCodeAsync(code);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePropertyCodeAsync(int id)
        {
            return base.Channel.DeletePropertyCodeAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.PropertyCode>> GetPropertyCodesAsync()
        {
            return base.Channel.GetPropertyCodesAsync();
        }
        
        public System.Threading.Tasks.Task<ModelDesignFirst_L1.Property> CreatePropertyAsync(string desc, int mediaID, int propCodeID)
        {
            return base.Channel.CreatePropertyAsync(desc, mediaID, propCodeID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ModelDesignFirst_L1.Property>> GetPropertiesByMediaIDAsync(int id)
        {
            return base.Channel.GetPropertiesByMediaIDAsync(id);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProject))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IProject))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8004/PC");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return ProjectClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IProject);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return ProjectClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IProject);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IProject,
        }
    }
}
